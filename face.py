from __future__ import print_function
from rx import *
from naoqi import *
from rxqi import *
import threading
from enum import Enum

#nao_address = "tcp://192.168.10.2:9559"
#session = qi.Session(nao_address)

class QiMemorySubject(Thread):
    def __init__(self, field, session):
        Thread.__init__(self)
        self.session = session
        self.field = field
        self.stopped = False
        self.subject = Subject()

    def run(self):
        mem = self.session.service("ALMemory")
        self.subscriber = mem.subscriber(self.field)
        self.signal = self.subscriber.signal.connect(self.subject.on_next)
        while not self.stopped:
            time.sleep(1)

    def stop(self):
        self.stopped = True
        self.subscriber.signal.disconnect(self.signal)
        print("Stopping")

class FaceDetectionSubject(QiMemorySubject):
    def __init__(self, session):
        QiMemorySubject.__init__(self, "FaceDetected", session)
        faceDetection = session.service("ALFaceDetection")
        faceDetection.subscribe("FaceDetected", 500, 0.0)

#faceDetection = FaceDetectionSubject(session)
#faceDetection.daemon = True
#faceDetection.start()

# this only implements parts of the data model, for a full overview see
# http://doc.aldebaran.com/2-4/naoqi/peopleperception/alfacedetection.html#alfacedetection

def time_stamp_dict(data):
    return {
        'seconds': data[0],
        'microseconds': data[1]
    }

def shape_info_dict(data):
    ''' info of the face shape from camera angles in radians '''
    if data != 0:
        return {
            'alpha': data[1],
            'beta': data[2],
            'size_x': data[3],
            'size_y': data[4]
        }
    else:
        return ""

def extra_info_dict(data):
    return {
        'face_id': data[0],
        'score_recognition': data[1],
        'face_label': data[2]
    }

def face_info_dict(data):
    return {
        'shape_info': shape_info_dict(data[0]),
        'extra_info': [extra_info_dict(extra) for extra in data[1:len(data)-1]]
    }

class RecognitionInfo(Enum):
    nothing_new = 0
    one_face = 2
    several_faces = 3
    learn_face_suggestion = 4

def recognition_info_dict(data):
    return {
        'status': RecognitionInfo(data[0]),
        'labels': None if len(data) == 0 or data[0] == 4 else data[1]
        # labels if there are any
    }

def face_data_dict(data):
    return {
        'face_info': [face_info_dict(face) for face in data[0:len(data)-1]],
        'recognition_info': recognition_info_dict(data[len(data)-1]) if data[len(data)-1] != [] else None
    }

def face_detected_dict(data):
    return {
        'time_stamp': time_stamp_dict(data[0]),
        'face_data': face_data_dict(data[1])
    }

#faceDetectionSamples = faceDetection.subject.sample(1000)

#faceDetectionSamplesSub = faceDetectionSamples.map(lambda x, y: face_detected_dict(x)).subscribe(print)

#face = ([[1253146363L, 507924L], [[[0L, 0.18268689513206482, -0.3184644281864166, 0.16940057277679443, 0.1765400618314743], [13L, 0.0, '', [0.21922428905963898, -0.342695415019989, 0.2059379369020462, -0.342695415019989, 0.22586743533611298, -0.342695415019989, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.16607898473739624, -0.3565416932106018, 0.17604373395442963, -0.3496185541152954, 0.14947108924388885, -0.360003262758255, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.1943124383687973, -0.29077187180519104, 0.2059379369020462, -0.28731030225753784, 0.18268689513206482, -0.29423344135284424], [0.1992947906255722, -0.25269460678100586, 0.15279269218444824, -0.25961774587631226, 0.1926516443490982, -0.26654085516929626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], [4L]], [0.08242666721343994, -0.0012679912615567446, 0.15297923982143402, -9.31322685637781e-10, 0.5358156561851501, -0.015382052399218082], [-0.03318493068218231, -0.011234896257519722, 0.394296258687973, 0.030201654881238937, 0.21056531369686127, -0.02028587833046913], 0L])

faces = [[[1467270451L, 471319L], [[[0L, 0.26572638750076294, -0.29423344135284424, 0.17936532199382782, 0.1869247704744339], [10L, 0.0, '', [0.2922990322113037, -0.32192596793174744, 0.27569112181663513, -0.3184644281864166, 0.3055853247642517, -0.3184644281864166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.22254584729671478, -0.32538753747940063, 0.23583218455314636, -0.32192596793174744, 0.2059379369020462, -0.32538753747940063, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.25742244720458984, -0.27000242471694946, 0.27236953377723694, -0.27000242471694946, 0.24247533082962036, -0.27000242471694946], [0.27901268005371094, -0.23538674414157867, 0.22586743533611298, -0.23884831368923187, 0.25576165318489075, -0.24923303723335266, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], []], [0.08242666721343994, -0.0012679912615567446, 0.15297923982143402, -9.31322685637781e-10, 0.5358156561851501, -0.015382052399218082], [-0.03325226157903671, -0.011313332244753838, 0.39428257942199707, 0.03053615614771843, 0.21004891395568848, -0.0200901310890913], 0L],
         [[1467270452L, 471642L], [[[0L, 0.14947108924388885, -0.29423344135284424, 0.2125811129808426, 0.22154048085212708], [10L, 0.0, '', [0.5314527750015259, -0.4153883755207062, 0.5314527750015259, -0.4153883755207062, 0.5314527750015259, -0.4153883755207062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5314527750015259, -0.4153883755207062, 0.5314527750015259, -0.4153883755207062, 0.5314527750015259, -0.4153883755207062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.5314527750015259, -0.4153883755207062, 0.5314527750015259, -0.4153883755207062, 0.5314527750015259, -0.4153883755207062], [0.5314527750015259, -0.4153883755207062, 0.5314527750015259, -0.4153883755207062, 0.5314527750015259, -0.4153883755207062, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], []], [0.08242666721343994, -0.0012679912615567446, 0.15297923982143402, -9.31322685637781e-10, 0.5358156561851501, -0.015382052399218082], [-0.03320026397705078, -0.011175338178873062, 0.3943219780921936, 0.02997431345283985, 0.21029819548130035, -0.020540861412882805], 0L],
         [[1467270453L, 472004L], [[[0L, 0.16607898473739624, -0.29769501090049744, 0.17272214591503143, 0.1800016313791275], [10L, 0.0, '', [0.1926516443490982, -0.3150028586387634, 0.17604373395442963, -0.31154128909111023, 0.2059379369020462, -0.3150028586387634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.12622004747390747, -0.31154128909111023, 0.13950634002685547, -0.30807971954345703, 0.1129337027668953, -0.30807971954345703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.15777504444122314, -0.27519479393959045, 0.17272214591503143, -0.27692556381225586, 0.14282794296741486, -0.27346399426460266], [0.1926516443490982, -0.24923303723335266, 0.13618478178977966, -0.24577146768569946, 0.15611425042152405, -0.25961774587631226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], []], [0.08242666721343994, -0.0012679912615567446, 0.15297923982143402, -9.31322685637781e-10, 0.5358156561851501, -0.015382052399218082], [-0.033186063170433044, -0.01130520086735487, 0.394281268119812, 0.03049442730844021, 0.21032053232192993, -0.02009744942188263], 0L],
         [[1467270454L, 272279L], [[[0L, 0.006643153261393309, -0.29769501090049744, 0.15611425042152405, 0.1626937836408615], [10L, 0.0, '', [0.03653739020228386, -0.3184644281864166, 0.02325105294585228, -0.3150028586387634, 0.04982369765639305, -0.3184644281864166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.029894206672906876, -0.32192596793174744, -0.016607899218797684, -0.3184644281864166, -0.04650210589170456, -0.3184644281864166, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.006643153261393309, -0.27346399426460266, 0.019929490983486176, -0.27346399426460266, -0.0066431849263608456, -0.27346399426460266], [0.029894206672906876, -0.23884831368923187, -0.023251084610819817, -0.23884831368923187, 0.006643153261393309, -0.25269460678100586, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], []], [0.08242462575435638, -0.001394430990330875, 0.15297923982143402, 0.0, 0.5358156561851501, -0.01691603660583496], [-0.03321513533592224, -0.011375577189028263, 0.394287645816803, 0.030767809599637985, 0.21028849482536316, -0.021646773442626], 0L],
         [[1467270455L, 272595L], [[[0L, 0.006643153261393309, -0.29769501090049744, 0.16940057277679443, 0.1765400618314743], [10L, 0.0, '', [0.03985895216464996, -0.31154128909111023, 0.02657264471054077, -0.30807971954345703, 0.05314528942108154, -0.31154128909111023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.026572613045573235, -0.3150028586387634, -0.00996471382677555, -0.31154128909111023, -0.03985898196697235, -0.3150028586387634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.009964745491743088, -0.26654085516929626, 0.02325105294585228, -0.26654085516929626, -0.0033215924631804228, -0.26654085516929626], [0.029894206672906876, -0.23192517459392548, -0.019929490983486176, -0.23538674414157867, 0.013286306522786617, -0.24577146768569946, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], []], [0.08242462575435638, -0.001394430990330875, 0.15297923982143402, 0.0, 0.5358156561851501, -0.01691603660583496], [-0.03315553069114685, -0.011456131003797054, 0.39426904916763306, 0.031139077618718147, 0.21032214164733887, -0.0213245190680027], 0L],
         [[1467270456L, 272950L], [[[0L, 0.006643153261393309, -0.29769501090049744, 0.16940057277679443, 0.1765400618314743], [10L, 0.0, '', [0.03653739020228386, -0.31154128909111023, 0.02325105294585228, -0.30807971954345703, 0.04650210589170456, -0.31154128909111023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.029894206672906876, -0.3150028586387634, -0.016607899218797684, -0.31154128909111023, -0.04318051412701607, -0.3150028586387634, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0033215924631804228, -0.26481008529663086, 0.016607899218797684, -0.26307931542396545, -0.00996471382677555, -0.26654085516929626], [0.02657264471054077, -0.23192517459392548, -0.023251084610819817, -0.23192517459392548, 0.0033215924631804228, -0.24230989813804626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], []], [0.08242666721343994, -0.0012679912615567446, 0.15297923982143402, -9.31322685637781e-10, 0.5358156561851501, -0.015382052399218082], [-0.03317972272634506, -0.011318172328174114, 0.3942699432373047, 0.030540553852915764, 0.21035458147525787, -0.020054582506418228], 0L],
         [[1467270457L, 473340L], [[[0L, 0.006643153261393309, -0.29423344135284424, 0.16940057277679443, 0.1765400618314743], [10L, 0.0, '', [0.03653739020228386, -0.30807971954345703, 0.02325105294585228, -0.30461814999580383, 0.04982369765639305, -0.30461814999580383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.026572613045573235, -0.30807971954345703, -0.013286306522786617, -0.30461814999580383, -0.03985898196697235, -0.30807971954345703, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.006643153261393309, -0.26134851574897766, 0.019929490983486176, -0.25961774587631226, -0.0066431849263608456, -0.26307931542396545], [0.02657264471054077, -0.22846360504627228, -0.023251084610819817, -0.22846360504627228, 0.006643153261393309, -0.24230989813804626, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], []], [0.08242666721343994, -0.0012679912615567446, 0.15297923982143402, -9.31322685637781e-10, 0.5358156561851501, -0.015382052399218082], [-0.033335261046886444, -0.011363258585333824, 0.3942646384239197, 0.030743621289730072, 0.20970848202705383, -0.019948381930589676], 0L],
         [[1467270458L, 473657L], [[[0L, 0.006643153261393309, -0.29423344135284424, 0.16940057277679443, 0.1765400618314743], [10L, 0.0, '', [0.043180543929338455, -0.30807971954345703, 0.029894206672906876, -0.30461814999580383, 0.05314528942108154, -0.30461814999580383, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [-0.019929490983486176, -0.31154128909111023, -0.0066431849263608456, -0.30461814999580383, -0.03653739020228386, -0.31154128909111023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.013286306522786617, -0.25961774587631226, 0.02657264471054077, -0.25961774587631226, -0.0, -0.25961774587631226], [0.03321579843759537, -0.22846360504627228, -0.016607899218797684, -0.22846360504627228, 0.013286306522786617, -0.23884831368923187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]], []], [0.08242666721343994, -0.0012679912615567446, 0.15297923982143402, -9.31322685637781e-10, 0.5358156561851501, -0.015382052399218082], [-0.03323998302221298, -0.01125979796051979, 0.39429762959480286, 0.030350718647241592, 0.21009290218353271, -0.02019779197871685], 0L]]

detected_faces = [face_detected_dict(f) for f in faces]




from math import tan

def distance(ball_size, angle):
    return ball_size / (2 * tan(angle))

def face_distance(angle_width, angle_height, width=14.9, height=20.05):
    return (distance(width, angle_width) + distance(height, angle_height)) / 2

def detect_face_distance(face):
    if face == None:
        return -1
    shape_info = face['face_data']['face_info'][0]['shape_info']
    return face_distance(shape_info['size_x'], shape_info['size_y'])

for face in detected_faces:
    print(detect_face_distance(face))
